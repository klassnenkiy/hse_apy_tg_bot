import asyncio
import logging
import requests
import matplotlib.pyplot as plt
import io
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

# –¢–æ–∫–µ–Ω—ã –¥–ª—è Telegram-–±–æ—Ç–∞ –∏ OpenWeather API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
router = Router()
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="set_profile")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–¥—É", callback_data="log_water")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", callback_data="log_food")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="log_workout")],
    [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="check_progress")],
    [InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", callback_data="show_commands")],
    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
])

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
class ProfileSetup(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–∏–ª—è."""
    weight = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    height = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    age = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    activity = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    city = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    food_quantity = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏

def calculate_water_goal(weight, activity, temperature):
    """–†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –≤–æ–¥—ã –Ω–∞ –¥–µ–Ω—å.

    Args:
        weight (int): –í–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–≥.
        activity (int): –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.
        temperature (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.

    Returns:
        int: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª.
    """
    base = weight * 30
    activity_bonus = (activity // 30) * 500
    weather_bonus = 500 if temperature > 25 else 0
    return base + activity_bonus + weather_bonus

def calculate_calorie_goal(weight, height, age, activity):
    """–†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å.

    Args:
        weight (int): –í–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–≥.
        height (int): –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–º.
        age (int): –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–æ–¥–∞—Ö.
        activity (int): –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.

    Returns:
        int: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π.
    """
    base = 10 * weight + 6.25 * height - 5 * age
    activity_bonus = (activity // 30) * 50
    return base + activity_bonus

def get_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Å –ø–æ–º–æ—â—å—é OpenWeather API.

    Args:
        city (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.

    Returns:
        float or None: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
    """
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['main']['temp']
    return None

def get_food_info(product_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ OpenFoodFacts.

    Args:
        product_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.

    Returns:
        dict or None: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
    """
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
    return None

@router.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, –∞ —Ç–∞–∫–∂–µ –≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile.",
                        reply_markup=main_menu)

@router.callback_query(lambda c: c.data == 'show_commands')
async def show_commands(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–∞–Ω–¥—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        callback_query (types.CallbackQuery): –í—ã–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    commands = (
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n"
        "/log_food - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏\n"
        "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/get_recommendations - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    )
    await callback_query.message.answer(commands)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é (callback query).
@router.callback_query()
async def handle_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª.

    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if callback_query.data == "set_profile":
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state("set_profile")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    elif callback_query.data == "log_water":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ–¥—ã
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–≤ –º–ª) —Å –∫–æ–º–∞–Ω–¥–æ–π /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>."
        )
    elif callback_query.data == "log_food":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –µ–¥—ã
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>."
        )
    elif callback_query.data == "log_workout":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30)."
        )
    elif callback_query.data == "check_progress":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback_query.from_user.id
        if user_id in users:
            user = users[user_id]
            water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
            calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                                f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
            await callback_query.message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                                                f"–í–æ–¥–∞:\n{water_progress}\n\n"
                                                f"–ö–∞–ª–æ—Ä–∏–∏:\n{calorie_progress}")
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            await callback_query.message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
            )
    elif callback_query.data == "get_recommendations":
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await get_recommendations(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å.
@router.callback_query(lambda c: c.data == 'set_profile')
async def set_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(ProfileSetup.weight)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã.
@router.message(Command("log_water"))
async def log_water(message: Message):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
    """
    try:
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 100)."
            )
            return

        amount = int(command_parts[1])
        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_water'] += amount
            water_left = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_left)} –º–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π.
def get_low_calorie_food():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π —Å —Å–∞–π—Ç–∞ OpenFoodFacts.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'name': str, 'calories': float}].
    """
    url = "https://world.openfoodfacts.org/cgi/search.pl?action=process&sort_by=calories&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        low_calorie_products = set()

        for product in products:
            calories = product.get('nutriments', {}).get('energy-kcal_100g', 0)
            if calories <= 50:
                low_calorie_products.add(
                    (product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), calories)
                )

        return [{'name': name, 'calories': calories} for name, calories in low_calorie_products]
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
@router.message(Command("check_progress"))
async def check_progress(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
    """
    user_id = message.from_user.id
    if user_id in users:
        user = users[user_id]

        water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
        remaining_water = user['water_goal'] - user['logged_water']

        calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                            f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
        balance_calories = user['logged_calories'] - user['burned_calories']

        await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                            f"–í–æ–¥–∞:\n"
                            f"{water_progress}\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª.\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                            f"{calorie_progress}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {balance_calories} –∫–∫–∞–ª.")
        graph = await plot_progress(user_id)
        if graph:
            await bot.send_photo(message.chat.id, types.InputFile(graph, filename="progress.png"))
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


@router.callback_query(lambda c: c.data == 'get_recommendations')
async def get_recommendations_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'get_recommendations'.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π.

    Args:
        callback_query (types.CallbackQuery): –í—ã–∑–æ–≤ –∫–æ–ª–ª–±–µ–∫–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏.

    Returns:
        None
    """
    products = get_low_calorie_food()

    if products:
        response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π:\n"
        for product in products[:5]:
            response += f"{product['name']} ‚Äî {product['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥\n"
        await callback_query.message.answer(response)
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")


@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –≤–≤–æ–¥ –≤–µ—Å–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    await state.set_state(ProfileSetup.weight)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")


async def process_weight(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî —Ä–æ—Å—Ç.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –≤–µ—Å–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    try:
        await state.update_data(weight=int(message.text))
        await state.set_state(ProfileSetup.height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")


async def process_height(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≤–æ–∑—Ä–∞—Å—Ç.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º —Ä–æ—Å—Ç–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    try:
        await state.update_data(height=int(message.text))
        await state.set_state(ProfileSetup.age)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")


async def process_age(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    try:
        await state.update_data(age=int(message.text))
        await state.set_state(ProfileSetup.activity)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")


async def process_activity(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≥–æ—Ä–æ–¥.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    try:
        await state.update_data(activity=int(message.text))
        await state.set_state(ProfileSetup.city)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


async def process_city(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    Returns:
        None
    """
    data = await state.get_data()
    data['city'] = message.text
    user_id = message.from_user.id

    temperature = get_weather(data['city'])
    if temperature is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    water_goal = calculate_water_goal(data['weight'], data['activity'], temperature)
    calorie_goal = calculate_calorie_goal(data['weight'], data['height'], data['age'], data['activity'])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    users[user_id] = {
        "weight": data['weight'],
        "height": data['height'],
        "age": data['age'],
        "activity": data['activity'],
        "city": data['city'],
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª", parse_mode=ParseMode.HTML)
    await state.clear()


async def plot_progress(user_id):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        io.BytesIO: –ë—É—Ñ–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG, –ª–∏–±–æ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    user = users.get(user_id)
    if not user:
        return None

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    days = ['–î–µ–Ω—å 1', '–î–µ–Ω—å 2', '–î–µ–Ω—å 3', '–î–µ–Ω—å 4', '–î–µ–Ω—å 5']
    water_progress = [user['logged_water'], user['logged_water'] + 200, user['logged_water'] + 400,
                      user['logged_water'] + 600, user['logged_water'] + 800]
    calorie_progress = [user['logged_calories'], user['logged_calories'] + 100, user['logged_calories'] + 200,
                        user['logged_calories'] + 300, user['logged_calories'] + 400]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))

    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–æ–¥–µ
    ax[0].plot(days, water_progress, marker='o', color='blue')
    ax[0].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ')
    ax[0].set_xlabel('–î–Ω–∏')
    ax[0].set_ylabel('–ú–ª –≤–æ–¥—ã')

    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    ax[1].plot(days, calorie_progress, marker='o', color='green')
    ax[1].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º')
    ax[1].set_xlabel('–î–Ω–∏')
    ax[1].set_ylabel('–ö–∫–∞–ª')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf


def get_low_calorie_food():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π —Å OpenFoodFacts.

    Returns:
        list[dict] | None: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'name': str, 'calories': float}, –ª–∏–±–æ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    url = "https://world.openfoodfacts.org/cgi/search.pl?action=process&sort_by=calories&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        low_calorie_products = set()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é <= 50 –∫–∫–∞–ª –Ω–∞ 100 –≥
        for product in products:
            calories = product.get('nutriments', {}).get('energy-kcal_100g', 0)
            if calories <= 50:
                low_calorie_products.add(
                    (product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), calories)
                )

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return [{'name': name, 'calories': calories} for name, calories in low_calorie_products]
    return None


@router.message(Command("log_water"))
async def log_water(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /log_water –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã, –≤—ã–ø–∏—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
    """
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –æ–∂–∏–¥–∞–µ–º –¥–≤–µ —á–∞—Å—Ç–∏: –∫–æ–º–∞–Ω–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 100).")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö)
        amount = int(command_parts[1])
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in users:
            users[user_id]['logged_water'] += amount
            water_left = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_left)} –º–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except ValueError:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /log_food –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.

    –û–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–æ—Ä–∏—è—Ö –Ω–∞ 100 –≥—Ä–∞–º–º.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    product_name = command_parts[1]
    food_info = get_food_info(product_name)
    if food_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        calories_per_100g = food_info['calories']
        await state.update_data(product_name=food_info['name'], calories_per_100g=calories_per_100g)
        await message.reply(f"{food_info['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        await state.set_state(ProfileSetup.food_quantity)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /log_workout –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    –û–∂–∏–¥–∞–µ—Ç —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–ø–æ—Ä—Ç) –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
    """
    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30).")
            return

        workout_type = command_parts[1].lower()
        workout_time = int(command_parts[2])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if workout_time <= 0:
            await message.reply("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        workout_calories = 0
        water_needed = 0
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –≤–æ–¥–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if workout_type == "–±–µ–≥":
            workout_calories = workout_time * 10
            water_needed = (workout_time // 30) * 200
        elif workout_type == "–ø–ª–∞–≤–∞–Ω–∏–µ":
            workout_calories = workout_time * 8
            water_needed = (workout_time // 30) * 200
        elif workout_type == "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç":
            workout_calories = workout_time * 7
            water_needed = (workout_time // 30) * 200
        else:
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–±–µ–≥', '–ø–ª–∞–≤–∞–Ω–∏–µ' –∏–ª–∏ '–≤–µ–ª–æ—Å–ø–æ—Ä—Ç'.")
            return

        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['burned_calories'] += workout_calories
            users[user_id]['logged_water'] += water_needed
            remaining_water = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({workout_type}) –Ω–∞ {workout_time} –º–∏–Ω—É—Ç ‚Äî {workout_calories} –∫–∫–∞–ª.\n"
                                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã.\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª –≤–æ–¥—ã.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check_progress –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, –∞ —Ç–∞–∫–∂–µ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö.
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
    """
    user_id = message.from_user.id
    if user_id in users:
        user = users[user_id]

        water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
        remaining_water = user['water_goal'] - user['logged_water']

        calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                            f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
        balance_calories = user['logged_calories'] - user['burned_calories']

        await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                            f"–í–æ–¥–∞:\n"
                            f"{water_progress}\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª.\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                            f"{calorie_progress}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {balance_calories} –∫–∫–∞–ª.")
        graph = await plot_progress(user_id)
        if graph:
            await bot.send_photo(message.chat.id, types.InputFile(graph, filename="progress.png"))
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


@router.message(Command("get_recommendations"))
async def get_recommendations(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_recommendations –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100 –≥.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
    """
    products = get_low_calorie_food()
    if products:
        response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π:\n"
        for product in products[:5]:
            response += f"{product['name']} ‚Äî {product['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥\n"
        await message.reply(response)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")


async def process_food_quantity(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.

    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    """
    try:
        grams = int(message.text)
        data = await state.get_data()
        calories_per_100g = data['calories_per_100g']
        consumed_calories = (calories_per_100g * grams) / 100

        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_calories'] += consumed_calories
            await message.reply(
                f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories:.2f} –∫–∫–∞–ª. –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {users[user_id]['logged_calories']:.2f} –∫–∫–∞–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.")


def setup_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥.
    """
    dp.include_router(router)
    dp.message.register(start, Command("start"))
    dp.message.register(set_profile, Command("set_profile"))
    dp.message.register(log_water, Command("log_water"))
    dp.message.register(log_food, Command("log_food"))
    dp.message.register(log_workout, Command("log_workout"))
    dp.message.register(check_progress, Command("check_progress"))
    dp.message.register(process_weight, ProfileSetup.weight)
    dp.message.register(process_height, ProfileSetup.height)
    dp.message.register(process_age, ProfileSetup.age)
    dp.message.register(process_activity, ProfileSetup.activity)
    dp.message.register(process_city, ProfileSetup.city)
    dp.message.register(process_food_quantity, ProfileSetup.food_quantity)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    setup_handlers(dp)
    asyncio.run(dp.start_polling(bot))
