import requests
from aiogram import types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from states import ProfileSetup
from config import OPENWEATHER_API_KEY

users = {}

def calculate_water_goal(weight, activity, temperature):
    base = weight * 30
    activity_bonus = (activity // 30) * 500
    weather_bonus = 500 if temperature > 25 else 0
    return base + activity_bonus + weather_bonus

def calculate_calorie_goal(weight, height, age, activity):
    base = 10 * weight + 6.25 * height - 5 * age
    activity_bonus = (activity // 30) * 50
    return base + activity_bonus

def get_weather(city):
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['main']['temp']
    return None

def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
    return None

async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, –∞ —Ç–∞–∫–∂–µ –≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile.")

async def set_profile(message: types.Message, state: FSMContext):
    await state.set_state(ProfileSetup.weight)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

async def process_weight(message: types.Message, state: FSMContext):
    try:
        await state.update_data(weight=int(message.text))
        await state.set_state(ProfileSetup.height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")

async def process_height(message: types.Message, state: FSMContext):
    try:
        await state.update_data(height=int(message.text))
        await state.set_state(ProfileSetup.age)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")

async def process_age(message: types.Message, state: FSMContext):
    try:
        await state.update_data(age=int(message.text))
        await state.set_state(ProfileSetup.activity)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")

async def process_activity(message: types.Message, state: FSMContext):
    try:
        await state.update_data(activity=int(message.text))
        await state.set_state(ProfileSetup.city)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

async def process_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['city'] = message.text
    user_id = message.from_user.id

    temperature = get_weather(data['city'])
    if temperature is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    water_goal = calculate_water_goal(data['weight'], data['activity'], temperature)
    calorie_goal = calculate_calorie_goal(data['weight'], data['height'], data['age'], data['activity'])

    users[user_id] = {
        "weight": data['weight'],
        "height": data['height'],
        "age": data['age'],
        "activity": data['activity'],
        "city": data['city'],
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª", parse_mode=ParseMode.HTML)
    await state.clear()

async def log_water(message: Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 200).")
            return

        amount = int(command_parts[1])
        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_water'] += amount
            water_left = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_left)} –º–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")


async def log_food(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    product_name = command_parts[1]
    food_info = get_food_info(product_name)
    if food_info:
        calories_per_100g = food_info['calories']
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –µ–≥–æ –∫–∞–ª–æ—Ä–∏—è—Ö
        await state.update_data(product_name=food_info['name'], calories_per_100g=calories_per_100g)

        # –ó–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –æ–Ω —Å—ä–µ–ª
        await message.reply(f"{food_info['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º
        await state.set_state(ProfileSetup.food_quantity)

    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


async def log_workout(message: Message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏: —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è
        command_parts = message.text.split()
        if len(command_parts) != 3:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30).")
            return

        workout_type = command_parts[1].lower()  # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        workout_time = int(command_parts[2])  # –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        if workout_time <= 0:
            await message.reply("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        workout_calories = 0
        water_needed = 0
        if workout_type == "–±–µ–≥":
            workout_calories = workout_time * 10  # 10 –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –º–∏–Ω—É—Ç—É –¥–ª—è –±–µ–≥–∞
            water_needed = (workout_time // 30) * 200  # 200 –º–ª –≤–æ–¥—ã –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        elif workout_type == "–ø–ª–∞–≤–∞–Ω–∏–µ":
            workout_calories = workout_time * 8  # 8 –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –º–∏–Ω—É—Ç—É –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è
            water_needed = (workout_time // 30) * 200
        elif workout_type == "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç":
            workout_calories = workout_time * 7  # 7 –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –º–∏–Ω—É—Ç—É –¥–ª—è –≤–µ–ª–æ—Å–ø–æ—Ä—Ç–∞
            water_needed = (workout_time // 30) * 200
        else:
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–±–µ–≥', '–ø–ª–∞–≤–∞–Ω–∏–µ' –∏–ª–∏ '–≤–µ–ª–æ—Å–ø–æ—Ä—Ç'.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['burned_calories'] += workout_calories
            users[user_id]['logged_water'] += water_needed
            remaining_water = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({workout_type}) –Ω–∞ {workout_time} –º–∏–Ω—É—Ç ‚Äî {workout_calories} –∫–∫–∞–ª.\n"
                                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã.\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª –≤–æ–¥—ã.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id in users:
        user = users[user_id]

        water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
        remaining_water = user['water_goal'] - user['logged_water']

        calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                            f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
        balance_calories = user['logged_calories'] - user['burned_calories']

        await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                            f"–í–æ–¥–∞:\n"
                            f"{water_progress}\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª.\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                            f"{calorie_progress}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {balance_calories} –∫–∫–∞–ª.")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


async def process_food_quantity(message: Message, state: FSMContext):
    try:
        grams = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º
        data = await state.get_data()
        calories_per_100g = data['calories_per_100g']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        consumed_calories = (calories_per_100g * grams) / 100

        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_calories'] += consumed_calories
            await message.reply(
                f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories:.2f} –∫–∫–∞–ª. –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {users[user_id]['logged_calories']:.2f} –∫–∫–∞–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.")