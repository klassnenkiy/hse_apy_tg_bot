import random
import logging
import requests
import matplotlib
import matplotlib.pyplot as plt
import io
import os
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from googletrans import Translator
from aiohttp import web
from config import API_TOKEN, OPENWEATHER_API_KEY, NUTRITIONIX_API_KEY, NUTRITIONIX_APP_ID, WEBHOOK_URL
from states import ProfileSetup

router = Router()
translator = Translator()

logging.basicConfig(level=logging.INFO)
matplotlib.use('Agg')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
WEBHOOK_URL = f"https://hse-apy-tg-bot.onrender.com/webhook"

users = {}


async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")


async def on_shutdown(app):
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ Webhook...")
    await bot.delete_webhook()
    await bot.session.close()


async def handle_webhook(request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return web.Response()


app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)


main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="set_profile")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–¥—É", callback_data="log_water")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", callback_data="log_food")],
    [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="log_workout")],
    [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="check_progress")],
    [InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", callback_data="show_commands")],
    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
])


def calculate_water_goal(weight, activity, temperature):
    base = weight * 30
    activity_bonus = (activity // 30) * 500
    weather_bonus = 500 if temperature > 25 else 0
    return base + activity_bonus + weather_bonus


def calculate_calorie_goal(weight, height, age, activity):
    base = 10 * weight + 6.25 * height - 5 * age
    activity_bonus = (activity // 30) * 50
    return base + activity_bonus


def get_weather(city):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['main']['temp']
    return None


def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
    return


def translate_to_english(text):
    translation = translator.translate(text, src='ru', dest='en')
    return translation.text


async def get_nutrition_info_from_nutritionix(product_name):
    translated_name = translate_to_english(product_name)

    url = "https://trackapi.nutritionix.com/v2/natural/nutrients"
    headers = {
        'x-app-id': NUTRITIONIX_APP_ID,
        'x-app-key': NUTRITIONIX_API_KEY,
        'Content-Type': 'application/json'
    }
    body = {
        "query": translated_name
    }

    response = requests.post(url, headers=headers, json=body)

    if response.status_code == 200:
        data = response.json()
        if 'foods' in data:
            food = data['foods'][0]
            product_name = food['food_name']
            calories_per_100g = food['nf_calories']
            return {
                'name': product_name,
                'calories': calories_per_100g
            }
    return None


@router.message(Command("start"))
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π, –∞ —Ç–∞–∫–∂–µ –≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
                        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile. –ò–ª–∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ /show_commands",
                        reply_markup=main_menu)


@router.callback_query()
async def handle_menu(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if callback_query.data == "set_profile":
        await state.set_state("set_profile")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

    elif callback_query.data == "log_water":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–≤ –º–ª) —Å –∫–æ–º–∞–Ω–¥–æ–π /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>. (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 100)")

    elif callback_query.data == "log_food":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>. (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω)")

    elif callback_query.data == "log_workout":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30).")

    elif callback_query.data == "check_progress":
        if user_id in users:
            user = users[user_id]
            water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
            calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                                f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
            progress_chart = create_progress_chart(user)
            progress_chart_bytes = progress_chart.getvalue()
            photo = BufferedInputFile(progress_chart_bytes, filename="progress_chart.png")
            await callback_query.message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n{water_progress}\n\n{calorie_progress}")
            await callback_query.message.answer_photo(photo=photo)
        else:
            await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    elif callback_query.data == "get_recommendations":
        await get_recommendations(callback_query.message)
    elif callback_query.data == "show_commands":
        commands = (
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏\n"
            "/show_commands - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/log_water - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n"
            "/log_food - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏\n"
            "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
            "/check_progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/get_recommendations - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "/preset_profile - –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        )
        await callback_query.message.answer(commands)


@router.message(Command("show_commands"))
async def show_commands(message: Message):
    commands = (
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏\n"
        "/show_commands - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n"
        "/log_food - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏\n"
        "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/get_recommendations - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "/preset_profile - –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
    )
    await message.reply(commands)


@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await state.set_state(ProfileSetup.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–µ—Å (–≤ –∫–≥):")


@router.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        await state.update_data(weight=int(message.text))
        await state.set_state(ProfileSetup.height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")


@router.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    try:
        await state.update_data(height=int(message.text))
        await state.set_state(ProfileSetup.age)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")


@router.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    try:
        await state.update_data(age=int(message.text))
        await state.set_state(ProfileSetup.activity)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")


@router.message(ProfileSetup.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        await state.update_data(activity=int(message.text))
        await state.set_state(ProfileSetup.city)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


@router.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    data['city'] = message.text
    user_id = message.from_user.id

    temperature = get_weather(data['city'])
    if temperature is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    water_goal = calculate_water_goal(data['weight'], data['activity'], temperature)
    calorie_goal = calculate_calorie_goal(data['weight'], data['height'], data['age'], data['activity'])

    users[user_id] = {
        "weight": data['weight'],
        "height": data['height'],
        "age": data['age'],
        "activity": data['activity'],
        "city": data['city'],
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª",
                        parse_mode=ParseMode.HTML)
    await state.clear()


@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 100).")
            return

        amount = int(command_parts[1])
        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_water'] += amount
            water_left = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_left)} –º–ª.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω)")
        return
    product_name = command_parts[1]
    food_info = await get_nutrition_info_from_nutritionix(product_name)

    if food_info:
        calories_per_100g = food_info['calories']
        await state.update_data(product_name=food_info['name'], calories_per_100g=calories_per_100g)
        await message.reply(f"üçå {food_info['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        await state.set_state(ProfileSetup.food_quantity)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


@router.message(ProfileSetup.food_quantity)
async def process_food_quantity(message: Message, state: FSMContext):
    try:
        grams = int(message.text)
        data = await state.get_data()

        calories_per_100g = data['calories_per_100g']
        consumed_calories = (calories_per_100g * grams) / 100

        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['logged_calories'] += consumed_calories
            await message.reply(
                f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories:.2f} –∫–∫–∞–ª. "
                f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {users[user_id]['logged_calories']:.2f} –∫–∫–∞–ª."
            )
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30).")
            return

        workout_type = command_parts[1].lower()
        workout_time = int(command_parts[2])

        if workout_time <= 0:
            await message.reply("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        workout_calories = 0
        water_needed = 0
        if workout_type == "–±–µ–≥":
            workout_calories = workout_time * 10
            water_needed = (workout_time // 30) * 200
        elif workout_type == "–ø–ª–∞–≤–∞–Ω–∏–µ":
            workout_calories = workout_time * 8
            water_needed = (workout_time // 30) * 200
        elif workout_type == "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç":
            workout_calories = workout_time * 7
            water_needed = (workout_time // 30) * 200
        else:
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–±–µ–≥', '–ø–ª–∞–≤–∞–Ω–∏–µ' –∏–ª–∏ '–≤–µ–ª–æ—Å–ø–æ—Ä—Ç'.")
            return

        user_id = message.from_user.id
        if user_id in users:
            users[user_id]['burned_calories'] += workout_calories
            users[user_id]['logged_water'] += water_needed
            remaining_water = users[user_id]['water_goal'] - users[user_id]['logged_water']
            await message.reply(f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({workout_type}) –Ω–∞ {workout_time} –º–∏–Ω—É—Ç ‚Äî {workout_calories} –∫–∫–∞–ª.\n"
                                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã.\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª –≤–æ–¥—ã.")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id in users:
        user = users[user_id]
        water_progress = f"–í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª."
        remaining_water = user['water_goal'] - user['logged_water']

        calorie_progress = (f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                            f"–°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.")
        balance_calories = user['logged_calories'] - user['burned_calories']
        progress_chart = create_progress_chart(user)
        await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                            f"–í–æ–¥–∞:\n"
                            f"{water_progress}\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining_water)} –º–ª.\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                            f"{calorie_progress}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {balance_calories} –∫–∫–∞–ª.")
        photo = BufferedInputFile(progress_chart.getvalue(), filename="progress_chart.png")
        await message.answer_photo(photo=photo)

    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


def create_progress_chart(user):
    water_progress = user['logged_water']
    water_goal = user['water_goal']
    calories_progress = user['logged_calories']
    calorie_goal = user['calorie_goal']
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    ax[0].bar(['–í—ã–ø–∏—Ç–æ', '–û—Å—Ç–∞–ª–æ—Å—å'],
              [water_progress, water_goal - water_progress],
              color=['#1f77b4', '#ff7f0e'], edgecolor='black')
    ax[0].set_title(f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ ({water_progress} –º–ª –∏–∑ {water_goal} –º–ª)', fontsize=14, fontweight='bold',
                    color='#1f77b4')
    ax[0].set_ylim(0, water_goal * 1.2)
    ax[0].set_facecolor('#f7f7f7')
    ax[1].bar(['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ', '–û—Å—Ç–∞–ª–æ—Å—å'],
              [calories_progress, calorie_goal - calories_progress],
              color=['#ff6347', '#98c379'], edgecolor='black')
    ax[1].set_title(f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º ({calories_progress} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª)', fontsize=14,
                    fontweight='bold', color='#ff6347')
    ax[1].set_ylim(0, calorie_goal * 1.2)
    ax[1].set_facecolor('#f7f7f7')
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    return buf


async def get_low_calorie_food():
    url = "https://trackapi.nutritionix.com/v2/search/instant/"
    headers = {
        "x-app-id": NUTRITIONIX_APP_ID,
        "x-app-key": NUTRITIONIX_API_KEY,
        "Content-Type": "application/json"
    }
    params = {
        "query": "low calorie"
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        food_items = data.get("common", [])
        if not food_items:
            return []
        low_calorie_foods = []
        for food in food_items:
            calories = food.get("nf_calories", 0)
            if calories <= 50:
                low_calorie_foods.append({
                    'name': food.get("food_name", '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'calories': calories
                })
        if low_calorie_foods:
            recommendations = random.sample(low_calorie_foods, k=min(5, len(low_calorie_foods)))
            return recommendations
        else:
            return []

    else:
        return None


@router.message(Command("get_recommendations"))
async def get_recommendations(message: Message):
    products = await get_low_calorie_food()

    if products:
        response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π:\n"
        for product in products[:5]:
            response += f"{product['name']} ‚Äî {product['calories']} –∫–∫–∞–ª\n"
        await message.reply(response)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")


@router.message(Command("preset_profile"))
async def preset_profile(message: Message):
    user_id = message.from_user.id

    preset_data = {
        "weight": 70,
        "height": 175,
        "age": 25,
        "activity": 60,
        "city": "Moscow"
    }

    temperature = get_weather(preset_data['city'])
    if temperature is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        return

    water_goal = calculate_water_goal(preset_data['weight'], preset_data['activity'], temperature)
    calorie_goal = calculate_calorie_goal(preset_data['weight'], preset_data['height'], preset_data['age'],
                                          preset_data['activity'])

    users[user_id] = {
        "weight": preset_data['weight'],
        "height": preset_data['height'],
        "age": preset_data['age'],
        "activity": preset_data['activity'],
        "city": preset_data['city'],
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                        f"–í–µ—Å: {preset_data['weight']} –∫–≥\n"
                        f"–†–æ—Å—Ç: {preset_data['height']} —Å–º\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {preset_data['age']} –ª–µ—Ç\n"
                        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {preset_data['activity']} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
                        f"–ì–æ—Ä–æ–¥: {preset_data['city']}\n\n"
                        f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n"
                        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª.")


def setup_handlers(dp):
    dp.include_router(router)
    dp.message.register(set_profile, Command("set_profile"))
    dp.callback_query.register(set_profile, lambda c: c.data == 'set_profile')


if __name__ == "__main__":
    import logging
    from aiohttp import web
    logging.basicConfig(level=logging.INFO)
    port = int(os.environ.get("PORT", 8080))
    setup_handlers(dp)
    web.run_app(app, host="0.0.0.0", port=port)
